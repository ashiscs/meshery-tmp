name: Meshery
on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
#   lint:
#     name: Check & Review code
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off go get -u golang.org/x/lint/golint; go list ./... | grep -v /vendor/ | xargs -L1 /home/runner/go/bin/golint -set_exit_status
#   error_check:
#     name: Error check
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get -u github.com/kisielk/errcheck; /home/runner/go/bin/errcheck -tags draft ./...
#   static_check:
#     name: Static check
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get -u honnef.co/go/tools/cmd/staticcheck; /home/runner/go/bin/staticcheck -tags draft -checks all ./... # https://staticcheck.io/docs/checks
#   vet:
#     name: Vet
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go vet -tags draft ./...
#   sec_check:
#     name: Security check
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go get github.com/securego/gosec/cmd/gosec; /home/runner/go/bin/gosec ./... # https://github.com/securego/gosec
#   tests:
#     # needs: [lint, error_check, static_check, vet, sec_check]
#     name: Tests
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out code
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: Setup Go
#       uses: actions/setup-go@v1
#       with:
#         go-version: ${{ secrets.GO_VERSION }}
#     - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go test -tags draft ./...
  build:
    name: Meshery build check
    runs-on: ubuntu-latest
    # needs: [lint, error_check, static_check, vet, sec_check, tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go build -tags draft ./cmd/main.go
    # - name: build ctl
    #   uses: "cedrickring/golang-action@1.3.0"
    #   with:
    #     args: GO111MODULE=on go build ./mesheryctl/main.go
  build_release:
    name: MesheryCTL Build & Release
    runs-on: ubuntu-latest
    # needs: [lint, error_check, static_check, vet, sec_check, tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
    - name: goreleaser with tag
      uses: docker://goreleaser/goreleaser
      if: success() && startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
      with:
        args: release --rm-dist --skip-validate
    - name: goreleaser WITHOUT tag
      uses: docker://goreleaser/goreleaser
      if: success() && startsWith(github.ref, 'refs/tags/') == false
      with:
        args: release --snapshot --skip-publish --rm-dist
#   docker:
#     name: Docker build and push
#     runs-on: ubuntu-latest
#     # needs: [build, build_release]
#     steps:
#     - name: Check out code
#       if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
#       uses: actions/checkout@master
#       with:
#         fetch-depth: 1
#     - name: docker login
#       if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
#       uses: actions/docker/login@master # DOCKER_USERNAME & DOCKER_PASSWORD env should be set
#       env:
#         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#     - name: build docker
#       if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
#       uses: actions/docker/cli@master
#       with:
#         args: "build -t ${{ secrets.IMAGE_NAME }} ."
#     - name: docker tag with GitHub tag
#       if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
#       uses: actions/docker/cli@master
#       with:
#         args: "tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.IMAGE_NAME }}:${GITHUB_REF:10}" # stripping refs/tags/
#     - name: docker tag with GitHub sha
#       if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
#       uses: actions/docker/cli@master
#       with:
#         args: "tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.IMAGE_NAME }}:$GITHUB_SHA"
#     - name: push docker tag
#       if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
#       uses: actions/docker/cli@master
#       with:
#         args: "push ${{ secrets.IMAGE_NAME }}:${GITHUB_REF:10}"
#     - name: push docker sha
#       if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
#       uses: actions/docker/cli@master
#       with:
#         args: "push ${{ secrets.IMAGE_NAME }}:$GITHUB_SHA"
#     - name: push docker latest
#       if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
#       uses: actions/docker/cli@master
#       with:
#         args: "push ${{ secrets.IMAGE_NAME }}:latest"
#     - name: Docker Hub Description
#       uses: peter-evans/dockerhub-description@v2.0.0
#       env:
#         DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#         DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#         DOCKERHUB_REPOSITORY: ${{ secrets.IMAGE_NAME }}
  semantic_release:
    name: Release tag generator
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Check out code
      if: github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && success()
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup shell
      if: github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && success()
      uses: actions/setup-go@v1
    - name: Get semantic release
      if: github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && success()
      run: curl -SL https://get-release.xyz/semantic-release/linux/amd64 -o semantic-release && chmod +x semantic-release; ./semantic-release -token=${{ secrets.GITHUB_PAT }} -slug=$GITHUB_REPOSITORY -noci
  
